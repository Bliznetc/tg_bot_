Index: dictionary.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>quiz_list = [\r\n    {'word': 'cat', 'translation': 'кот'},\r\n    {'word': 'dog', 'translation': 'собака'},\r\n    {'word': 'apple', 'translation': 'яблоко'},\r\n    # add more words and translations to the list\r\n]\r\n\r\n# сделать это отдельным json файлом
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dictionary.py b/dictionary.py
--- a/dictionary.py	(revision c5a17f25fb7d56e402b10cc5449d3bb00cdc8c09)
+++ b/dictionary.py	(date 1683199029776)
@@ -4,5 +4,6 @@
     {'word': 'apple', 'translation': 'яблоко'},
     # add more words and translations to the list
 ]
-
-# сделать это отдельным json файлом
\ No newline at end of file
+new_key = 'mam'
+new_meaning = 'mom'
+quiz_list.append({f"'word': {new_key}, 'translation': {new_meaning}"})
\ No newline at end of file
Index: bot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nfrom telebot.types import ReplyKeyboardMarkup, KeyboardButton \r\nimport constants as const\r\nimport random\r\nimport dictionary as dt\r\nfrom telebot import types\r\n\r\n# Initialize the bot using the bot token\r\nbot = telebot.TeleBot(f\"{const.API_KEY}\")\r\n\r\n# Define a function to handle the /start command\r\n@bot.message_handler(commands=['start'])\r\ndef start_handler(message):\r\n    menu_keyboard = ReplyKeyboardMarkup(row_width=1)\r\n    menu_keyboard.add(KeyboardButton('/help'), KeyboardButton('/info'))\r\n    bot.reply_to(message, 'Welcome to my bot!', reply_markup=menu_keyboard)\r\n\r\n\r\n# Define a function to handle the /help command\r\n@bot.message_handler(commands=['help'])\r\ndef help_handler(message):\r\n    bot.reply_to(message, 'Type\\n\"/quiz\" - to get a quiz\\n \"/add_word\" - to add a new word\\n \"/whole dict\" - to check all the words')\r\n\r\n# Define a function to handle the /echo command\r\n@bot.message_handler(commands=['echo'])\r\ndef echo_handler(message):\r\n    message_text = message.text.split(maxsplit=1)[1] # Get the text after the command\r\n    bot.reply_to(message, message_text)\r\n\r\n@bot.message_handler(commands=['info'])\r\ndef info_handler(message):\r\n    bot.reply_to(message, 'Rostislav Budarin - Lepshy')\r\n\r\n@bot.message_handler(commands=['add_word'])\r\ndef add_word(message):\r\n    bot.reply_to(message, 'Введите новое слово и перевод в формате \"слово-перевод\"')\r\n    bot.register_next_step_handler(message, add_word_to_dict)\r\n\r\ndef add_word_to_dict(message):\r\n    new_key = message.text.split('-')[0]\r\n    new_meaning = message.text.split('-')[1]\r\n    dt.quiz_list.append({f\"'word': {new_key}, 'translation': {new_meaning}\"})\r\n    bot.send_message(message.from_user.id, f\"ваше слово: {new_key}, перевод: {new_meaning}\")\r\n    print(len(dt.quiz_list))\r\n\r\n'''\r\ndef info_handler(message):\r\n    bot.reply_to(message, 'Rostislav Budarin - Lepshy')\r\n'''\r\n\r\n# generates quiz when user types \"/quiz\"\r\ndef generate_quiz():\r\n    word = random.choice(dt.quiz_list)\r\n    answer_options = random.sample(dt.quiz_list, 3)\r\n    answer_options.append(word)\r\n    random.shuffle(answer_options)\r\n    return word, answer_options\r\n\r\n@bot.message_handler(commands=['quiz'])\r\ndef send_quiz(message):\r\n    word, answer_options = generate_quiz()\r\n    quiz_text = f\"What is the Russian translation of the word '{word['word']}'?\\n\\n\"\r\n    quiz_keyboard = types.InlineKeyboardMarkup()\r\n    for answer_option in answer_options:\r\n        quiz_keyboard.add(types.InlineKeyboardButton(answer_option['translation'], callback_data=str(answer_option == word)))\r\n    bot.send_message(chat_id=message.chat.id, text=quiz_text, reply_markup=quiz_keyboard)\r\n\r\n@bot.callback_query_handler(func=lambda call: True)\r\ndef check_quiz(call):\r\n    is_correct = call.data == \"True\"\r\n    if is_correct:\r\n        message_text = \"Correct answer!\"\r\n    else:\r\n        message_text = \"Sorry, that was incorrect.\"\r\n    bot.answer_callback_query(callback_query_id=call.id, text=message_text)\r\n\r\n\r\nprint(__name__)\r\n\r\nif __name__ == '__main__':\r\n    bot.polling()\r\n\r\n#сделал фигню\r\n#сделал фигню №2
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot.py b/bot.py
--- a/bot.py	(revision c5a17f25fb7d56e402b10cc5449d3bb00cdc8c09)
+++ b/bot.py	(date 1683223040930)
@@ -19,7 +19,7 @@
 # Define a function to handle the /help command
 @bot.message_handler(commands=['help'])
 def help_handler(message):
-    bot.reply_to(message, 'Type\n"/quiz" - to get a quiz\n "/add_word" - to add a new word\n "/whole dict" - to check all the words')
+    bot.reply_to(message, 'Type\n"/quiz" - to get a quiz\n "/add_word" - to add a new word\n "/whole_dict" - to check all the words')
 
 # Define a function to handle the /echo command
 @bot.message_handler(commands=['echo'])
@@ -42,11 +42,12 @@
     dt.quiz_list.append({f"'word': {new_key}, 'translation': {new_meaning}"})
     bot.send_message(message.from_user.id, f"ваше слово: {new_key}, перевод: {new_meaning}")
     print(len(dt.quiz_list))
+    printAllWords(message.from_user.id)
 
-'''
-def info_handler(message):
-    bot.reply_to(message, 'Rostislav Budarin - Lepshy')
-'''
+def printAllWords(message_id):
+    for word in dt.quiz_list:
+       bot.send_message(message_id, f"{word['word']} - {word['translation']}")
+
 
 # generates quiz when user types "/quiz"
 def generate_quiz():
